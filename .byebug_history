exit
options.model_class.where(options.foreign_key => self.send(options.primary_key))
options.model_class.where(options.foreign_key => self.send(options.primary_key)
options.model_class
options
self.id
self._id
self._
self
options.primary_key
options
id
options.foreign_key
options.model_class
options
owner_id
self
send(:owner_id)
options
options.model_class
options
name
self
q
self
q
options = HasManyOptions.new(name, self.to_s, options)
options = HasManyOptions.new(name, self, options)
self
options
options = HasManyOptions.new(name, self.class, options)
options
self
c
self
c
q
send(options.foreign_key)
options.foreign_key
options
self
self.foreign_key
self
options
foreign_key
c
q
bel_options
q
options
name
Breakfast
self.name
self
self.class.options
self.class
self
@options
q
@options
Cat.all
self
q
clear
0x00000003528e30
Cat.all
Human
@options
c
@options
c
@options.model_class
Human.all
Human
@options
exit
n
exit
@options.model_class
@options.class_name
@options
self
Human
Cat
Cat.all
Cat.methods
Cat.class
Cat
Cat.all
Cat.find(1)
breakfast
self
human
Human
@options
@options.model_class
@options
n
self
n
self.class
self
q
self.model_class.table_name
self.model_class.name
self.model_class.methods
self.model_class
self.table_name
self.methods
self
self.name
self
self.table_name
self
q
self.class_name
self
q
self
self.table_name
self.class_name
q
self.class_name.tableize
self
q
self.class_name.constantize
@class_name.constantize.all
@class_name.constantize.class
@class_name.constantize
@class_name
self
q
defaults
q
self_class_name
self
defaults
q
self_class_name
q
self.primary_key
self
defaults
default
q
self
self.
defaults
q
self.a = 1
defaults[:primary_key]
b = defaults[:primary_key]
b = defaults[a]
a = defaults.keys.first
self
defaults
q
defaults
q
self.methods
self
q
defaults
q
defaults
q
results
q
results
q
results
q
cat.first
cat = self.new(results.first)
self
results.empty?
results
q
self.new(results.first)
self
results.first
results
q
params.values
params
where_line = "WHERE " + where_line.join(" AND ")
where_line = "WHERE " + where_line_join(" AND ")
where_line
params.each { |key, _| where_line << "#{key} = ?" }
where_line = []
where_line
params 
where_line
params.each { |key, _| where_line << "#{key} = ?" }
params.each do |key, _|
params
params.merge!({id: 1, class: "User", int: 1})
params
params.merge({id: 1, class: "User", int: 1})
params.merge({id: 1, class: User, int: 1})
params
where_line = []
where_line = [
where_line
q
where_line
q
where_line
q
where_line
q
where_line
q
"#{a}"
a = :aaa
params
q
display v
v
ar
q
ar
params
results
q
n
results
n
results
self.table_name
ar
q
params
ar
arr
q
Cat.where(nq
cats
display cat
cat
n
q
results
q
ar
n
q
ar.claq
ar
n
ar
n
ar
q
c
q
